/*------------------------------------*\
		$WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
@if $grid-use-fractions {
  $grid-unit-delimiter: \/ !global;
} @else {
  $grid-unit-delimiter: -of- !global;
}

@mixin grid-setup($namespace: "") {
	/**
	* Whole
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}1    { width: 100%;}


	/**
	* Halves
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}2    { width: 50%;}


	/**
	* Thirds
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}3    { width: 33.333%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}3    { width: 66.666%;}


	/**
	* Quarters
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}4    { width: 25%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}4    { @extend .g-#{$namespace}1#{$grid-unit-delimiter}2;}
	.g-#{$namespace}3#{$grid-unit-delimiter}4    { width: 75%;}


	/**
	* Fifths
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}5    { width: 20%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}5    { width: 40%;}
	.g-#{$namespace}3#{$grid-unit-delimiter}5    { width: 60%;}
	.g-#{$namespace}4#{$grid-unit-delimiter}5    { width: 80%;}


	/**
	* Sixths
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}6    { width: 16.666%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}6    { @extend .g-#{$namespace}1#{$grid-unit-delimiter}3;}
	.g-#{$namespace}3#{$grid-unit-delimiter}6    { @extend .g-#{$namespace}1#{$grid-unit-delimiter}2;}
	.g-#{$namespace}4#{$grid-unit-delimiter}6    { @extend .g-#{$namespace}2#{$grid-unit-delimiter}3;}
	.g-#{$namespace}5#{$grid-unit-delimiter}6    { width: 83.333%;}


	/**
	* Eighths
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}8    { width: 12.5%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}8    { @extend .g-#{$namespace}1#{$grid-unit-delimiter}4;}
	.g-#{$namespace}3#{$grid-unit-delimiter}8    { width: 37.5%;}
	.g-#{$namespace}4#{$grid-unit-delimiter}8    { @extend .g-#{$namespace}1#{$grid-unit-delimiter}2;}
	.g-#{$namespace}5#{$grid-unit-delimiter}8    { width: 62.5%;}
	.g-#{$namespace}6#{$grid-unit-delimiter}8    { @extend .g-#{$namespace}3#{$grid-unit-delimiter}4;}
	.g-#{$namespace}7#{$grid-unit-delimiter}8    { width: 87.5%;}


	/**
	* Tenths
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}10   { width: 10%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}10   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}5;}
	.g-#{$namespace}3#{$grid-unit-delimiter}10   { width: 30%;}
	.g-#{$namespace}4#{$grid-unit-delimiter}10   { @extend .g-#{$namespace}2#{$grid-unit-delimiter}5;}
	.g-#{$namespace}5#{$grid-unit-delimiter}10   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}2;}
	.g-#{$namespace}6#{$grid-unit-delimiter}10   { @extend .g-#{$namespace}3#{$grid-unit-delimiter}5;}
	.g-#{$namespace}7#{$grid-unit-delimiter}10   { width: 70%;}
	.g-#{$namespace}8#{$grid-unit-delimiter}10   { @extend .g-#{$namespace}4#{$grid-unit-delimiter}5;}
	.g-#{$namespace}9#{$grid-unit-delimiter}10   { width: 90%;}


	/**
	* Twelfths
	*/
	.g-#{$namespace}1#{$grid-unit-delimiter}12   { width: 8.333%;}
	.g-#{$namespace}2#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}6;}
	.g-#{$namespace}3#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}4;}
	.g-#{$namespace}4#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}3;}
	.g-#{$namespace}5#{$grid-unit-delimiter}12   { width: 41.666%;}
	.g-#{$namespace}6#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}1#{$grid-unit-delimiter}2;}
	.g-#{$namespace}7#{$grid-unit-delimiter}12   { width: 58.333%;}
	.g-#{$namespace}8#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}2#{$grid-unit-delimiter}3;}
	.g-#{$namespace}9#{$grid-unit-delimiter}12   { @extend .g-#{$namespace}3#{$grid-unit-delimiter}4;}
	.g-#{$namespace}10#{$grid-unit-delimiter}12  { @extend .g-#{$namespace}5#{$grid-unit-delimiter}6;}
	.g-#{$namespace}11#{$grid-unit-delimiter}12  { width: 91.666%;}
}

@include grid-setup();



/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  g-1/4	g-lap-1/2	g-palm-1/1"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a of-4 of the
 * horizontal space, a of-2 of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */

@if $responsive == true{

@include media-query(palm){
	@include grid-setup("palm-");
}

@include media-query(lap){
	@include grid-setup("lap-");
}

@include media-query(lap-and-up){
	@include grid-setup("lap-and-up-");
}

@include media-query(portable){
	@include grid-setup("portable-");
}

@include media-query(desk){
	@include grid-setup("desk-");
}


/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */

@if $responsive-extra {

@include media-query(desk-wide){
	@include grid-setup("desk-wide-");
}

}

} /* endif */
