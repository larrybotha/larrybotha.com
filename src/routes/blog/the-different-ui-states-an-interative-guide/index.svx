---
title: The different UI states - an interactive guide

seoTitle: The different UI states - an interactive guide
seoDescription: An interactive guide for non-developers that helps explain the magic
  of what goes on in the background during different UI states
---

We all know what it's like to be confronted with an ominous loading spinner.
Maybe some effort has been put into its design, but we're still left staring at this
thing that's blocking us from seeing any content. Or maybe it's a button we clicked,
and the text is briefly replaced with a little spinner.

What's going on here? Maybe you've wondered, or maybe it's never crossed your mind.
If you're curious as to why you're confronted with loading spinners, or why you
need to consider them when designing an app, then I'm going to help demystify
the magic.

## First, an analogy

Things could get technical quickly, so let's use an analogy to make things more
familiar. I'll use the scenario of ordering food at a restaurant, as it
ties in nicely with UI states.

There are four words we'll see frequently in this article:

- **client** - picture yourself as a customer at your favourite restaurant when you
    see this word. As a customer you ask for things, and the waitrons run back
    and forth between you and the kitchen.
- **server** - with this analogy, think of the kitchen when you see _server_.  The
    kitchen is the heart of the restaurant; where all the hard work is done before
    that delicious meal is presented to you.
- **request** - as a customer, you're going to ask the waitron for food, drinks,
    and other restauranty things
- **response** - after you've asked for something, you're going to expect to
    receive something from the kitchen; sometimes you'll get what you want
    quickly, sometimes your blood will boil as you wait for longer than you
    expected, and other times you won't get what you want at all!

Now, because our restaurant is an analogy for UI states work, it's going to be a
little different from the real world, and a little more formal.

## What happens when a web page loads

Firstly, we need a basic understanding of how a web page loads.

When we first visit our restaurant, we need to first ask for a table. We don't
arrive with a table; we get a table when we arrive.

At our example restaurant, once we arrive, we ask for a table, and because it's
a fancy restaurant, our table is brought to us! It just so happens that the
kitchen is where all the tables are stored... weird...

// illustration of getting a table

What a lovely table with cutlery, napkins, and flowers.

This is similar to what happens when you visit a website. You click a link, or
enter a URL into your address bar, telling your browser to get you the website.
Your browser makes a _request_ to the computer where the website is hosted (the
server), and the server _responds_ with all the HTML, CSS, and Javascript that make
the website. That HTML, CSS, and Javascript is the same as the kitchen bringing
us our table with all of its adornments.

// illustrate how browser requests data from server

### When things go wrong

Now, things aren't always hunky-dory at our restaurant. Are you asking for a
delicious bowl of ramen at an Italian restaurant? What about the kitchen - maybe
they're fighting fires back there and your waiter is all smiles...

What we have here is two ways your order can go wrong - you request something
that the kitchen can't fulfill for one reason or another, or you request
something and there's something massively wrong in the kitchen that has nothing
to do with you.

#### Sorry, you can't have that

The first type of problem is specifically to do with your request. You want
ramen? Sorry, we don't serve that here. You want grandmas secret pizza-dough
recipe? Sorry, you're not privy to such information.

// illustrate waiter returning with nothing after requesting ramen, and table disappears

You'll notice that your table disappeared... what the? We'll get to that when we
learn about different types of websites a little later.

Now what happens? You've asked for something, and the kitchen can't do anything
about it until you ask for something else. You're free to ask for the same thing
again, but the kitchen isn't going to change that they can't help you. You need
to change what you're asking for. Ok fine... I'll have a Margarita pizza then!

// illustrate ordering pizza

These are called _client-side_ errors, and we're all familiar with them.
You've asked for ramen at an Italian restaurant: **404 Not Found**.
You want to see grandma's recipe? No!: *403 Forbidden*.

There are a whole lot of these responses, and they describe different errors. All of
them use a number in the 400s, and all of them mean you've requested something that
you can't have. To fix a 400 error, you need to change what you're asking for.

#### Sorry, the kitchen is experiencing trouble at the moment

The second type of problem lies with the kitchen. If the restaurant's kitchen suddenly
burst into flames, no matter how many times, and how nicely you asked for pizza,
they're probably not going to serve you until they get that fire under control.

// illustrate ordering something, waiter returning with fire on back

These are called _server-side_ errors - there's not much you can do, because
what's wrong is the kitchen is on fire.

Although not as common as 404 errors, you've likely seen a 500 error. This can
mean that a database is down, or a bug in the code on the server prevented the
webpage from being returned, to name a few. Just as _client-side_ errors always
use a number in the 400s, _server-side_ errors are always in the 500s.

And for completeness, when you what you want, this called a success response,
and all success responses are given numbers in the 200s.

### How a server can respond to a request

This is the gist of how client-server communication works, and what is
responsible for the different UI states - a _client_ makes a _reqest_ to a _server_,
and that _server_ _responds_ in one of three ways:

- you get what you asked for
- you can't get what you asked for because of either what you asked for, or how
    you asked for it - please change your request
- you can't get what you asked for because something is not working properly,
    and asking differently is probably not going to help

## Different types of UIs

Now we'll deal with those mysterious disappearing tables.

The interactions we saw between the customer and the kitchen above appear odd to
us, but they represent how the web worked for many years before dynamic
interfaces came about - you would visit a website, the entire page would load,
and when you clicked on a link or submitted a form, your current page would be
entirely replaced by a new page:

// illustration of requesting a new fork and table is replaced

Then, as Javascript became more powerful, developers started doing fancy things
where they could choose what gets loaded in the page at different times, and all
without reloading the rest of the page:

// illustration of requesting a new fork, and only fork is replaced

This improvement allowed interfaces to be dynamic, to choose only the pieces of information
to load when they made sense to load, and this approach aligns more realistically
with how a restaurant actually works. This is the heart and soul of what makes
applications feel like _apps_.

You'll notice that our waitron still brings us a table at the beginning - we need
somewhere to have our food and drinks delivered to - and once we have our table, the
waitron can add and remove items from the table at our request.

In terms of websites or apps, this is the same as the initial request to the
server to get the basic structure of the UI. Once we have that basic structure,
the UI can start requesting only the things which are important for where the
user is, or what the user is doing.

Going forward we'll focus on dynamic UIs.

## Working with data

What I've just revealed to you is how an app communicates with an API. You want
a new fork? Here you go, a new fork! You'd like the menu? Here you go! You don't
need a new table every time you ask for something. How absurd!

In terms of dynamic UIs, an API is a server that only gives you data, and doesn't
give you any of the HTML, CSS, or Javascript that makes your UI look like it
does. Our restaurant's kitchen gives us a table, but once we've got our table
then all we need is

An API has no knowledge of how the information it provides is presented. Its
only job is to handle your requests, and give you the appropriate responses.
Whether your table is made of wood, glass, or marble, the API is not concerned.

And in much the same way that you can ask for something that the kitchen doesn't
have, or you ask for some water while the kitchen is on fire, an API will use those
same 400 and 500 errors to tell you when there's a problem.

### Types of requests

There are a few things we can do when we ask for something at a restaurant. We
can ask for something that already exists to be brought to us, such as the menu. We
can ask for a meal to be made for us. We can ask for our meal to be changed in
some way - perhaps our ramen needs to be heated. We could also ask for our meal
to be taken away if we're not satisfied.

You may have heard of CRUD, which sounds pretty rubbish, but it's actually an
acronym for the following things

### Types of success responses

So what's the big deal - you ask for something at the restaurant, and either you
get it, or the kitchen tells you you're going to need to ask for something else.

Well... it's not quite that simple. Our kitchen is quite formal, and sometimes
they want you to be very specific about what you want. If you ask for a fork,
the kitchen is likely going to say, "Well, which fork do you want? I can't just
give you any fork. What kind of operation do you think we're running here?".

You're going to have to ask for that fork by name, or they may end up giving all
of the forks:

// illustrate getting a fork vs getting all forks



##### empty response

##### content may be empty

- waiter brings an empty table

##### content may not be empty

- waiter brings empty table

##### non-empty response

#### redirect

#### client error

#### server error

### the request response cycle

## implications for the UI and UX
