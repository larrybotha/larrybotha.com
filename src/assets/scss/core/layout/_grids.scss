@if $use-grids {

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="gw">
       <div class="g  one-third">
           <p>One third grid</p>
       </div><!--
    --><div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div><!--
    --><div class="g  one-half">
           <p>One half grid</p>
       </div><!--
    --><div class="g  one-quarter">
           <p>One quarter grid</p>
       </div><!--
    --><div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */


/**
 * Grid wrapper
 */
%grid {
  list-style: none;
  margin-bottom: 0;
  @include px-and-rem(margin-left, -$grid-gutter);

  @if $use-legacy-grid {
    .oldie & {
      display: inline-block;
      width: 100%;
      width: calc(100% + #{$grid-gutter}em);
    }
  }

  @if $use-flexbox-grid {
    display: flex;
    flex-wrap: wrap;
  }
}

/**
 * very infrequently occuring grid wrappers as children of grid wrappers.
 */
[class*="gw"] > [class*="gw"] { margin-left: 0;}

.gw { @extend %grid;}

  /**
   * grid items
   */
  %grid__item {
    @include px-and-rem(padding-left, $grid-gutter);

    @if $use-legacy-grid {
      width: 100%;

      .oldie & {
        display: inline-block;
        vertical-align: top;
      }
    }

    @if $global-border-box == false { @include vendor(box-sizing, border-box);}
  }

  .g { @extend %grid__item;}

  /**
   * Allow the content of a column to occupy the full height of the
   * column
   *
   * Child div must have flex: 1; or width: 100%; set to fill horizontal
   * space
   *
   * Does not work for legacy browsers
   */
  .g--tall {
    @extend %grid__item;

    @if $use-flexbox-grid { display: flex;}
  }

  /**
   * Columns that automatically fill the remaining horizontal space
   *
   * To be used as is, without column width modifiers. Viewport modifiers will
   * not override the effect of auto.
   *
   * Works mostly on <= IE9, mostly
   * Requires .oldie class on html tag
   */
  .g--auto {
    @extend %grid__item;

    @if $use-legacy-grid {
      .oldie & { display: table-cell;}
    }

    @if $use-flexbox-grid { flex: 1;}
  }

  /**
   * Columns that shrink wrap around content - ideal for .g--auto to occupy
   * remaining space.
   *
   * To be used as is, without column width modifiers. Viewport modifiers will
   * override shrink-wrap effect
   *
   * Works mostly on <= IE9, mostly
   */
  .g--shrink-wrap {
    @extend %grid__item;
    width: auto;

    @if $use-legacy-grid {
      .oldie & { display: table-cell;}
    }
  }



/**
* reversed grids
*/
%gw--rev {
  @extend %grid;

  @if $use-legacy-grid {
    .oldie & {
      direction: rtl;
      text-align: right;
    }
  }

  @if $use-flexbox-grid { flex-direction: row-reverse;}

  & > %grid__item {
    @if $use-legacy-grid {
      .oldie & {
        direction: ltr;
        text-align: left;
      }
    }
  }
}


/**
* gutterless grids have all the properties of regular grids, minus any spacing.
*/
%gw--no-guts {
  @extend %grid;
  margin-left: 0;

  & > %grid__item { padding-left: 0;}
}


/**
* centered grids align grid items centrally without needing to use push or pull
* classes.
*/
%gw--center {
  @extend %grid;

  @if $use-legacy-grid {
    .oldie & { text-align: center;}
  }

  @if $use-flexbox-grid { justify-content: center;}

  & > %grid__item {
    @if $use-legacy-grid {
      .oldie & { text-align: left;}
    }
  }
}


/**
 * right aligned grids
 */
%gw--right {
  @extend %grid;

  @if $use-legacy-grid {
    .oldie & { text-align: right;}
  }

  @if $use-flexbox-grid { justify-content: flex-end;}

  & > %grid__item {
    @if $use-legacy-grid {
      .oldie & { text-align: left;}
    }
  }
}


/**
 * middle aligned grids
 */
%gw--middle {
  @extend %grid;

  @if $use-flexbox-grid { align-items: center;}

  & > %grid__item {
    @if $use-legacy-grid {
      .oldie & { vertical-align: middle;}
    }
  }
}


/**
 * bottom aligned grids
 */
%gw--bottom {
  @extend %grid;

  @if $use-flexbox-grid { align-items: flex-end;}

  & > %grid__item {
    @if $use-legacy-grid {
      .oldie & { vertical-align: bottom;}
    }
  }
}

}//endif
